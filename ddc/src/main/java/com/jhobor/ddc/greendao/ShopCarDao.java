package com.jhobor.ddc.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jhobor.ddc.entity.ShopCar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP_CAR".
*/
public class ShopCarDao extends AbstractDao<ShopCar, Long> {

    public static final String TABLENAME = "SHOP_CAR";

    /**
     * Properties of entity ShopCar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GoodsId = new Property(1, int.class, "goodsId", false, "GOODS_ID");
        public final static Property GoodsName = new Property(2, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property GoodsPrice = new Property(3, float.class, "goodsPrice", false, "GOODS_PRICE");
        public final static Property GoodsPic = new Property(4, String.class, "goodsPic", false, "GOODS_PIC");
        public final static Property Count = new Property(5, int.class, "count", false, "COUNT");
        public final static Property StoreId = new Property(6, int.class, "storeId", false, "STORE_ID");
        public final static Property StoreName = new Property(7, String.class, "storeName", false, "STORE_NAME");
        public final static Property Time = new Property(8, String.class, "time", false, "TIME");
    }


    public ShopCarDao(DaoConfig config) {
        super(config);
    }
    
    public ShopCarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_CAR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GOODS_ID\" INTEGER NOT NULL UNIQUE ," + // 1: goodsId
                "\"GOODS_NAME\" TEXT NOT NULL ," + // 2: goodsName
                "\"GOODS_PRICE\" REAL NOT NULL ," + // 3: goodsPrice
                "\"GOODS_PIC\" TEXT," + // 4: goodsPic
                "\"COUNT\" INTEGER NOT NULL ," + // 5: count
                "\"STORE_ID\" INTEGER NOT NULL ," + // 6: storeId
                "\"STORE_NAME\" TEXT NOT NULL ," + // 7: storeName
                "\"TIME\" TEXT);"); // 8: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_CAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopCar entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGoodsId());
        stmt.bindString(3, entity.getGoodsName());
        stmt.bindDouble(4, entity.getGoodsPrice());
 
        String goodsPic = entity.getGoodsPic();
        if (goodsPic != null) {
            stmt.bindString(5, goodsPic);
        }
        stmt.bindLong(6, entity.getCount());
        stmt.bindLong(7, entity.getStoreId());
        stmt.bindString(8, entity.getStoreName());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopCar entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGoodsId());
        stmt.bindString(3, entity.getGoodsName());
        stmt.bindDouble(4, entity.getGoodsPrice());
 
        String goodsPic = entity.getGoodsPic();
        if (goodsPic != null) {
            stmt.bindString(5, goodsPic);
        }
        stmt.bindLong(6, entity.getCount());
        stmt.bindLong(7, entity.getStoreId());
        stmt.bindString(8, entity.getStoreName());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShopCar readEntity(Cursor cursor, int offset) {
        ShopCar entity = new ShopCar( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // goodsId
            cursor.getString(offset + 2), // goodsName
            cursor.getFloat(offset + 3), // goodsPrice
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // goodsPic
            cursor.getInt(offset + 5), // count
            cursor.getInt(offset + 6), // storeId
            cursor.getString(offset + 7), // storeName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShopCar entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodsId(cursor.getInt(offset + 1));
        entity.setGoodsName(cursor.getString(offset + 2));
        entity.setGoodsPrice(cursor.getFloat(offset + 3));
        entity.setGoodsPic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCount(cursor.getInt(offset + 5));
        entity.setStoreId(cursor.getInt(offset + 6));
        entity.setStoreName(cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShopCar entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShopCar entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShopCar entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
